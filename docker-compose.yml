version: '3.6'
services:
  customer:
    build: 
      dockerfile: Dockerfile
      context: .
      target: dev
    container_name: customer
    ports:
      - "8082:8082"
    volumes:
      - ./customer:/app
    links:
      - postgres-customer
    depends_on:
      - postgres-customer
    networks:
      - customer
    deploy:
      resources:
        limits:
          cpus: 0.50
          memory: 512M

  postgres-customer:
    image: postgres:14-alpine
    container_name: postgres-customer
    ports:
      - "5434:5432"
    environment:
      POSTGRES_DB: customer
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    volumes:
      - ./customer/configs/database/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - customer

  order:
    build: 
      dockerfile: Dockerfile
      context: .
      target: dev
    container_name: order
    ports:
      - "8084:8084"
    volumes:
      - ./order:/app
    links:
      - rabbitmq
      - postgres-order
    depends_on:
      - rabbitmq
      - postgres-order
    networks:
      - rabbitmq
      - order
    deploy:
      resources:
        limits:
          cpus: 0.50
          memory: 512M

  postgres-order:
    image: postgres:14-alpine
    container_name: postgres-order
    ports:
      - "5436:5432"
    environment:
      POSTGRES_DB: order
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    volumes:
      - ./order/configs/database/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - order

  rabbitmq:
    image: rabbitmq:3.9-management-alpine
    container_name: rabbitmq
    ports:
      - "15672:15672"
      - "5672:5672"
    networks:
      - rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest

  order-aggregator:
    build: 
      dockerfile: Dockerfile
      context: .
      target: dev
    container_name: order-aggregator
    volumes:
      - ./order-aggregator:/app
    links:
      - rabbitmq
    depends_on:
      - rabbitmq
    networks:
      - rabbitmq
      - customer
      - product
      - general
    deploy:
      resources:
        limits:
          cpus: 0.50
          memory: 512M

  notification:
    build: 
      dockerfile: Dockerfile
      context: .
      target: dev
    container_name: notification
    ports:
      - "8091:8080"
    volumes:
      - ./notification:/app
    links:
      - rabbitmq
    depends_on:
      - rabbitmq
    networks:
      - rabbitmq
    deploy:
      resources:
        limits:
          cpus: '0.50'
          memory: 128M

  order-receiver:
    build: 
      dockerfile: Dockerfile
      context: .
      target: dev
    container_name: order-receiver
    ports:
      - "8090:8090"
    volumes:
      - ./order-receiver:/app
    links:
      - rabbitmq
    depends_on:
      - rabbitmq
    networks:
      - rabbitmq
      - general
    deploy:
      resources:
        limits:
          cpus: 0.50
          memory: 512M

  product:
    build: 
      dockerfile: Dockerfile
      context: .
      target: dev
    container_name: product
    ports:
      - "8083:8083"
    volumes:
      - ./product:/app
    depends_on:
      - postgres-product
    networks:
      - product
    deploy:
      resources:
        limits:
          cpus: 0.50
          memory: 512M

  postgres-product:
    image: postgres:14-alpine
    container_name: postgres-product
    ports:
      - "5435:5432"
    environment:
      POSTGRES_DB: product
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    volumes:
      - ./product/configs/database/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - product

  user:
    build: 
      dockerfile: Dockerfile
      context: .
      target: dev
    container_name: user
    ports:
      - "8081:8081"
    volumes:
      - ./user:/app
    depends_on:
      - postgres-user
    networks:
      - user
    deploy:
      resources:
        limits:
          cpus: 0.50
          memory: 512M

  postgres-user:
    image: postgres:14-alpine
    container_name: postgres-user
    ports:
      - "5433:5432"
    environment:
      POSTGRES_DB: user
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    volumes:
      - ./user/configs/database/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - user
  
  ticket-create:
    build: 
      dockerfile: Dockerfile
      context: .
      target: dev
    container_name: ticket-create
    ports:
      - "8085:8085"
    volumes:
      - ./ticket-create:/app
    links:
      - rabbitmq
    depends_on:
      - rabbitmq
    networks:
      - rabbitmq
      - ticket-process
      - ticket-create
      - redis
    deploy:
      resources:
        limits:
          cpus: 0.50
          memory: 512M

  ticket-process:
    build: 
      dockerfile: Dockerfile
      context: .
      target: dev
    container_name: ticket-process
    ports:
      - "8097:8097"
    volumes:
      - ./ticket-process:/app
    links:
      - rabbitmq
      - postgres-ticket-process
    depends_on:
      - rabbitmq
      - postgres-ticket-process
    networks:
      - ticket-process
      - rabbitmq
      - redis
    deploy:
      resources:
        limits:
          cpus: 0.50
          memory: 512M

  postgres-ticket-process:
    image: postgres:14-alpine
    container_name: postgres-ticket-process
    ports:
      - "5437:5432"
    environment:
      POSTGRES_DB: ticket-process
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    volumes:
      - ./ticket-process/configs/database/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - ticket-process
  
  redis:
    image: redis:7.0-alpine
    container_name: redis
    ports:
      - 6379:6379
    command: redis-server --save 60 1 --loglevel warning
    networks:
      - redis

networks:
  customer:
    driver: bridge
  order:
    driver: bridge
  product:
    driver: bridge
  user:
    driver: bridge
  ticket-create:
    driver: bridge
  rabbitmq:
    driver: bridge
  ticket-process:
    driver: bridge
  redis:
    driver: bridge
  general:
    driver: bridge
  